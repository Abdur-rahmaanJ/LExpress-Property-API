import requests
from bs4 import BeautifulSoup

class Agent():
    """The main class of the LExpressProperty API."""

    __requests_list__ = []

    def check_connection(self):
        """The internet connection to https://www.lexpressproperty.com/en/ is checked.
           Returns True if connection is successful, returns False if connection is unsuccessful."""

        try:
            server = requests.get("https://www.lexpressproperty.com/en/")
            return True
        except:
            return False

    def process_request(self, payment, property_type, sort_by):
        """A URL request is created based on the parameters payment, property_type and sort_by using
           the request_spec dictionary which translates the given parameters into a valid url request.
           Request_spec is continiously looped over until the correct key and appropriate url_segment
           is found."""

        request_spec = {
                        "buy": {"house": {"most expensive": "?sort=-price&l=15", "url_segment": "/villa"},
                                "url_segment": "/buy-mauritius"},
                        "rent": {},
                        "holiday": {}
                        }

        for payment_key in request_spec:
            if payment == payment_key:
                __payment__ = request_spec[payment]["url_segment"]
                for property_key in request_spec[payment]:
                    if property_type == property_key:
                        __property_type__ = request_spec[payment][property_type]["url_segment"]
                        for sort_by_key in request_spec[payment][property_type]:
                            if sort_by == sort_by_key:
                                __sort_by__ = request_spec[payment][property_type][sort_by]

        url_request = "https://www.lexpressproperty.com/en" + __payment__ + __property_type__ + __sort_by__
        return url_request

    def parse(self, url_request, pages):
        """Parses the HTML returned from the given url_request, attempts to find real estate references
           and their specifics."""

        # Empty list of properties is created.
        properties_list = []

        # Different URL's are generated by the Engine for the different pages of data.
        self.__requests_list__ = []
        for iteration in range(1, (pages+1)):

            """Page number is generated."""
            __page_number__ = "&p=" + str(iteration)

            """URL request is created, sent and soup is created."""
            page_request = url_request + __page_number__
            self.__requests_list__.append(page_request)
            server_response = requests.get(page_request)
            server_response = server_response.text
            soup = BeautifulSoup(server_response, "html.parser")

            """The soup is parsed for relevent data."""
            for html in soup.find_all("div", {"class": "text-box"}):

                # List for the details of property is created.
                property_list = []
                
                # Title is found.
                try:
                    __title__ = html.h2.get_text().strip()
                # The Title will be set as None if it cannot be extracted.
                except:
                    __title__ = None

                # The price is found.
                try:
                    prices = html.find("strong", {"class": "price"})
                    price_one = prices.a.get_text().strip()
                    price_two = prices.em.get_text().strip()
                    __price__ = price_one + " " + price_two
                # The price will be set as None if it cannot be extracted.
                except:
                    __price__ = None

                # Link is found.
                try:
                    __link__ = html.a["href"]
                # The link will be set as None if it cannot be extracted.
                except:
                    __link__ = None

                # Location is found.
                try:
                    __location__ = html.address.get_text().strip()
                # The location will be set as None if it cannot be extracted.
                except:
                    __location__ = None

                # Description is found.
                try:
                    __description__ = html.p.get_text().strip()
                # The description will be set as None if it cannot be extracted.
                except:
                    __description__ = None

                # Features of the property are found.
                feature_list = []
                try:
                    features = html.find("ul", {"class": "option-list"})
                    for feature in (features.find_all("li")):
                        feature_list.append(feature.get_text().strip())
                except:
                    pass

                # The details of the property are added to the property_list.
                details = {"Title" : __title__, "Price" : __price__, "Location" : __location__, "Description": __description__, "URL": __link__, "Features": feature_list}
                properties_list.append(details)

        return properties_list

    def collect(self, payment = None, property_type = None, sort_by = "least expensive", pages = 1):
        """Collects and returns a list of real estate references in Mauritius based on the given parameters
           payment, property_type, sort_by and pages."""

        if self.check_connection() is True:
            url_request = self.process_request(payment, property_type, sort_by)
            results = self.parse(url_request, pages)
            return results
        else:
            return None
